# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg
    orbits:
        type: GeoJSON
        url: data/orbits.geojson
cameras:
    perspective:
        type: perspective
styles:
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif  
                        #else
                            return step(threshold, value);
                        #endif
                    }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
    shapes-polygons:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
                TWO_PI: 6.283185307
            blocks:
                global: |
                    // get distance field of a polygon in the center
                    // where N is the number of sides of it
                    // ================================
                    float shapeDF (vec2 st, int N) {
                        st = st *2.-1.;
                        float a = atan(st.x,st.y)+PI;
                        float r = TWO_PI/float(N);
                        return cos(floor(.5+a/r)*r-a)*length(st);
                    }
                    
                    // draw a polygon in the center
                    // where N is the number of sides of it
                    // ================================
                    float shape (vec2 st, int N, float width) {
                        return 1.0-aastep(width,shapeDF(st,N));
                    }

                    // draw the border of a polygon in the center
                    // where N is the number of sides of it
                    // ================================
                    float shapeBorder (vec2 st, int N, float size, float width) {
                        return shape(st,N,size)-shape(st,N,size-width);
                    }
    space-tile:
        shaders:
            defines:
                TILE_SCALE: 0.0002445
                NORMALIZED_SHORT(x): (x * 32767.)
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords () {
                        return fract(v_pos.xy*TILE_SCALE);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = NORMALIZED_SHORT(a_position.xyz);
    grid:
        mix: space-tile
        shaders:
            blocks:
                global: |
                    //  Simple Grid
                    //=============================
                    float grid(in vec2 st, in float res, in float press){
                        st = fract(st*res);
                        return 1.0-(step(press*res*.7,st.x) * step(press*res*.7,st.y));
                    }
                    float grid(in vec2 st, in float res){
                        return grid(st,res,0.005);
                    }
                    // GridTile
                    //=============================
                    float TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.5+(1.0-fract(u_map_position.z))*0.1;
                        pct += grid(st,0.02,press)*.5;
                        pct += grid(st,0.01,press)*.25;
                        return pct*.5;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
    zoom:
        mix: functions-map
        shaders:
            blocks: 
                normal: |
                    float SatOsmPct = pow(1.-map(u_map_position.z,6.,9.,0.,1.),5.0);
    hud:
        mix: [shapes-cross, grid]
        shaders:
            blocks:
                filter: |
                    // VARIABLES
                    //===============================
                    color = clamp(color,0.0,1.0);
                    vec2 st_center = gl_FragCoord.xy/u_resolution.xy;
                    float aspect = u_resolution.x/u_resolution.y;
                    st_center -= .5;
                    st_center.x *= aspect;
                    st_center += .5;
                    float light = 1.;
                    light = abs((step(.5,light_accumulator_diffuse.r) * smoothstep(.0,1.,1.-SatOsmPct))-light);
                    //
                    // GRID ON TILES
                    //===============================
                    // GRID
                    vec2 st = getTileCoords();
                    float zoom = 0.0001+fract(u_map_position.z);
                    float overlayGrid = 0.0;
                    overlayGrid += TileGrid()*.5;
                    // CROSSES
                    vec2 crosses_st = st + .5;
                    vec2 crosses_st_f = fract(crosses_st);
                    overlayGrid *= 1.-rect(crosses_st_f, .003*(1.+(1.-zoom)));
                    overlayGrid += cross(crosses_st_f, .0001, .012*(1.+(1.-zoom)) )*.75;
                    //
                    // APPLY 
                    //===============================
                    color.rgb = mix(color.rgb,vec3(light),clamp(overlayGrid,0.,1.)); 
                    //
                    // FILTER
                    //===============================
                    //vec2 st_i = floor(st_center*(max(u_resolution.x,u_resolution.y))*.1 );
                    //color += step(0.5,abs(mod(st_i.x,2.)-mod(st_i.y+1.,2.)))*0.1;                   
    earth:
        base: polygons
        mix: [hud, zoom]
        material: 
            diffuse: white
            specular: black
    water:
        base: polygons
        mix: [hud, zoom]
        material:
            diffuse: white
            specular: white
    spline:
        base: lines
        lighting: false
    area:
        base: polygons
        mix: [zoom, hud]
        blend: inlay
        shaders: 
            blocks: 
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }

                    float stripes(vec2 st, float width){
                        st = rotate2D(.72)*st;
                        st *= 92.;
                        return step(.5+width*0.5,abs(sin(st.y*3.14159265358)));
                    }
                filter: |
                    color.a = stripes(st_center*2.,SatOsmPct*1.4)*.5;
    geometry-projection:
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0
                PI: 3.14159265358979323846
                HALF_PI: 1.570796327
                QUATER_PI: .785398163
                deg2rad(d): (((d)*3.14159265358979323846)/180.0)
                rad2deg(d): (((d)*180.0)/3.14159265358979323846)
            blocks:
                global: |
                    //
                    //    The following functions take or return there results in something close to meters, along the equator 
                    //    http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return rad2deg(2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI); }
                    float x2lon_m (float x) { return rad2deg(x/EARTH_RADIUS); }
                    float lat2y_m (float lat) { return EARTH_RADIUS*log(tan(QUATER_PI+ deg2rad(lat)/2.0)); }
                    float lon2x_m (float lon) { return deg2rad(lon)*EARTH_RADIUS; }
    orbit:
        base: lines
        mix: [geometry-projection, functions-map, shapes-polygons]
        lighting: false
        texcoords: true
        animated: true
        blend: overlay
        shaders:
            uniforms:
                u_data: data/orbits.png
                u_param: [0,0,0,0]
            blocks:
                global: |
                    float pulse(float x, float p, float w){
                        return (smoothstep(p-w*.5,p,x) + smoothstep(p+w*.5,p,x))-1.0;
                    }

                    vec2 getPosFor(float index, float time) {
                        float offsetX = ((time+u_param.w)/u_param.z);
                        vec2 posA = texture2D(u_data,vec2(offsetX/u_param.x,1.-index/u_param.y)).xy;
                        vec2 posB = texture2D(u_data,vec2((offsetX+1.)/u_param.x,1.-index/u_param.y)).xy;
                        vec2 dist = posB-posA;
                        return mix(posA,posB,fract(offsetX));
                    }
                color: |
                    vec2 merc = u_map_position.xy+v_position.xy;
                    vec2 latlon = vec2(y2lat_m(merc.y),x2lon_m(merc.x));
                    vec2 uv = (latlon.yx/vec2(180.,90.)+1.)*.5;

                    float index = (color.r)*255.+.5;
                    vec2 pos = getPosFor(index,u_time);

                    pos.xy = ((pos.xy*2.)-1.)*vec2(180.,90.);
                    pos.xy = vec2(lon2x_m(pos.x),lat2y_m(pos.y));
                    vec2 st = (merc-pos.xy)*.0000001;

                    st *= 1.+pow(map(u_map_position.z,2.,22.,0.,1.),2.0)*1000.;
                    st += .5;
                    float spot = shapeBorder(st,3,.1,.06);
                    color.rgb = mix(vec3(1.,1.,0.), vec3(.0,.0,.0), spot);
                    color.a = spot + pulse(v_texcoord.x,.5,.03)*.5;
layers:
    earth:
        data: { source: osm }
        draw:
            earth:
                order: 1
                color: '#555'
            spline:
                order: 4
                color: white
                width: [[1,0px],[5,1.5px]]
    water:
        data: { source: osm }
        draw:
            water:
                order: 2
                color: '#aaa'
    landuse:
        data: { source: osm }
        draw:
            area:
                order: 3
                color: gray
    orbit:
        data: { source: orbits }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            lines:
                interactive: true
                order: 0
                color: [.5, .5, .5, .0]
                width: 10px
                extrude: function () { return feature.height * 1000; }
            orbit:
                order: 10
                color: function(){ return [(feature.id)/255, feature.id/255, feature.id/255]; }
                width: [[1,50px],[9,50px],[22,1000px]]
                extrude: function () { return feature.height * 1000; }
    orbit-labels:
        data: { source: orbits }    
        filter: { $zoom: { max: 10 } }
        draw:
            text:
                order: 3
                offset: [0px, 8px]
                visible: false
                font:
                    fill: black
                    family: ['Jura', Helvetica]
                    size: 10px
                    weight: 100
                    stroke: { color: white , width: 3.5 }
        # show:
        #     filter: |
        #         function () {
        #             return feature[properties.key_text] && feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1;
        #         }
        #     draw:
        #         orbit:
        #             order: 10
        #             color: function(){ return [(feature.id)/255, feature.id/255, feature.id/255]; }
        #             width: 50px
        #         text:
        #             order: 11
        #             offset: [0px, 8px]
        #             font:
        #                 fill: black
        #                 family: ['Jura', Helvetica]
        #                 size: 14px
        #                 weight: 100
        #                 stroke: { color: white , width: 3.5 }
    roads:
        data: { source: osm, layer: roads }
        filter: { $zoom: {min: 7}, not: { highway: service, kind: rail } }
        draw:
            spline:
                order: 7
                color: white
                width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                spline:
                    order: 8
                    color: [1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    spline:
                        color: [1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        spline:
                            color: [0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    spline:
                        order: 5
                        color: [0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                spline:
                    color: [[13, [0.8, 0.8, 0.8]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                spline:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
        z-order:
            filter: { $zoom: {min: 14} }
            draw:
                spline:
                    order: function() {return 6 + feature.sort_key;}